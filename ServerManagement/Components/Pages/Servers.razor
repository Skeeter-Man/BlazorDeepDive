@page "/servers"

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br />
<br />

<div class="container-fluid text-center">
    <div class="row">
        @foreach (var city in Cities)
        {
            <div class="col">
                <div class="card">
                    <img src="/images/@($"{city}.png")" class="card-img-top" alt="@($"{city}.png")">
                    <div class="card-body">
                        <h5 class="card-title">@city</h5>
                        <p class="card-text">Click the button below to filter by the city of @city</p>
                        <a href="/servers/#" class="btn btn-primary">Filter by @city</a>
                    </div>
                </div>
            </div>
        }
    </div>

    <br />
    <div class="row mb-3">
        <a href="Servers/Add" class="btn btn-success">Add Server</a>
    </div>

</div>
<div class="row">
    <ul>
        @foreach (var server in servers)
        {
            <li class="mb-1">
                @server.Name in @server.City is
                <span style="color:@(server.IsOnline ? "green" : "red")">
                    @(server.IsOnline ? "online" : "offline")
                </span>
                <a href="/editserver/@server.Id">Edit @server.Name</a>

                <EditForm Model="server"
                          FormName="@($"form-server-{server.Id}")"
                          OnValidSubmit="@(() => { DeleteServer(server.Id); } )">

                    <button type="submit" class="btn btn-danger">Delete @server.Name</button>
                </EditForm>

            </li>
        }
    </ul>
</div>

@code {
    public List<Server> servers { get; set; } = ServersRepository.GetServers();
    public List<string> Cities { get; set; } = CitiesRepository.GetCities();

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.Refresh();
        }
    }
}
